#!/bin/bash

# doc - Docker Operation Control

VERSION=0.1
DOCKER_COMPOSE_LOCAL_FILE="docker-compose.local.yml"
DOCKER_COMPOSE_TEST_FILE="docker-compose.test.yml"
DOCKER_COMPOSE_BETA_FILE="docker-compose.beta.yml"
DOCKER_COMPOSE_FILE="docker-compose.yml"
DOCKER_REPO="pluto:5000"
SOURCE_DIR="./sources"

showhelp() {
	out ""
	out "doc $VERSION"
	out "========================================"
	out "Commands:"
	out "\tbuild \t - building an image"
	out "\tbnt \t - build and tag an image"
	out "\tup \t - run docker-compose with given environment [local, prod]"
	out "\tdeploy \t - build, tag and deploy to remote repo"
	out ""
}

### Docker Commands
dockerdeploy() {
    IMAGE_NAME="$1"
	CUR_VERSION=$(get_current_version $IMAGE_NAME)

	if [ "$CUR_VERSION" == '' ]; then
		errout "image \"$1\" wurde nicht gefunden"
		exit 1;
	fi

	#new incremented version
	NEW_VERSION=$(buildandtag $IMAGE_NAME $CUR_VERSION);
	NEW_IMAGE_NAME="$IMAGE_NAME:$NEW_VERSION";

    out "Deploying image $NEW_IMAGE_NAME to $DOCKER_REPO...\n"

	#push image to remote docker repo
    docker -D -l=debug push "$DOCKER_REPO/$NEW_IMAGE_NAME" &&

	#TODO: increment version in file if push successfull
	sed -i "s|\(.*image:\s*$IMAGE_NAME:\)$CUR_VERSION|\1$NEW_VERSION|g" "$DOCKER_COMPOSE_FILE"
	out "new version build: $(get_current_version $IMAGE_NAME)"
}

get_current_version() {
	if [ "$1" == '' ]; then
		errout "missing image name"
		exit 1;
	fi
	echo $(sed -n "s|.*image:\s*$1:\(.*\)$|\1|p" "$DOCKER_COMPOSE_FILE")
}

buildandtag() {
	IMAGE_NAME=$1
	CUR_VERSION=$2
	
	NEW_VERSION=$(increment_version $CUR_VERSION)
	NEW_IMAGE_NAME="$IMAGE_NAME:$NEW_VERSION"
	#name and build image in SOURCE_DIR and tag builded image
	docker build -t "$NEW_IMAGE_NAME" "$SOURCE_DIR" >&2 &&
    docker tag "$NEW_IMAGE_NAME" "$DOCKER_REPO/$NEW_IMAGE_NAME" >&2

	if [ $? -eq 0 ]; then
		echo $NEW_VERSION;
	else
		exit 1;
	fi
}

build() {
	if [ "$1" != '']; then
		docker build -t "$1" "$SOURCE_DIR"
	fi
}

dockerup() {
	case "$1" in
		"local") out "building for local";
			if [ ! -f "$DOCKER_COMPOSE_LOCAL_FILE" ]; then
				errout "no configuration file found in current dir ($DOCKER_COMPOSE_LOCAL_FILE)"
			fi
			docker-compose -f docker-compose.yml -f docker-compose.local.yml up
		;;
		"prod") out "building for prod";
            docker-compose up
        ;;
		"whats") showhelp ;;
		*) out "wrong env"; exit 1; ;;
	esac
}

### Helper Methods

increment_version (){
  declare -a part=( ${1//\./ } )
  declare    new
  declare -i carry=1

  for (( CNTR=${#part[@]}-1; CNTR>=0; CNTR-=1 )); do
    len=${#part[CNTR]}
    new=$((part[CNTR]+carry))
    [ ${#new} -gt $len ] && carry=1 || carry=0
    [ $CNTR -gt 0 ] && part[CNTR]=${new: -len} || part[CNTR]=${new}
  done
  new="${part[*]}"
  echo -e "${new// /.}"
} 

out() {
	echo -e "$@"
}

errout() {
	echo -e "[ERROR]: $@"
	exit 1;
}


### Main
case "$1" in
	"build") out "building image $2"; build "$2" ;;
	"bnt") out "build and tag"; buildandtag $2 $(get_current_version $2) ;;
	"up") out "docker up"; dockerup $2 ;;
    "deploy") out "starting deployment"; dockerdeploy "$2" "$3" ;;
	*)   out "Unknown parameter"; showhelp; ;;
esac

