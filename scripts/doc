#!/bin/bash
set -e

###
# doc - Docker Operation Control
###

VERSION=0.2
DOCKER_COMPOSE_LOCAL_FILE="docker-compose.local.yml"
DOCKER_COMPOSE_TEST_FILE="docker-compose.test.yml"
DOCKER_COMPOSE_BETA_FILE="docker-compose.beta.yml"
DOCKER_COMPOSE_PROD_FILE="docker-compose.prod.yml"
DOCKER_COMPOSE_FILE="docker-compose.yml"
DOC_DOCKERFILE_INSTALL="./dockerfiles/Dockerfile-install"
DOC_DOCKERFILE_PROD="./dockerfiles/Dockerfile-prod"
DOC_SETTINGS="./config/settings.sh"
SOURCE_DIR="./sources"


showhelp() {
	out ""
	out "doc $VERSION"
	out "========================================"
	out "Commands:"
	out "build \t\t - building an image"
	out "bnt \t\t - build and tag an image"
	out "up \t\t - run docker-compose with given environment [local, prod]"
	out "in \t\t - search for running web container and open a shell in it"
	out "deploy \t\t - build, tag and deploy to remote repo"
	out "initproject \t - initialize a new project"
	out ""
}

### Docker Commands
dockerdeploy() {
    IMAGE_NAME="$1"
	CUR_VERSION=$(get_current_version $IMAGE_NAME)

	if [ -z "$CUR_VERSION" ]; then
		errout "eighter current version or image could not be determined"
		exit 1;
	fi

	info "Deploying image $IMAGE_NAME with version $CUR_VERSION to $DOC_REPO...\n"

	#push image to remote docker repo
	docker -D -l=debug push "$DOC_REPO/$IMAGE_NAME"
}

get_current_version() {
	if [ "$1" == '' ]; then
		errout "missing image name"
		exit 1;
	fi
	echo  $(sed -n "s|.*image:\s*\($DOC_REPO/\)\?$1:\(.*\)$|\2|p" "$DOCKER_COMPOSE_FILE")
}

buildandtag() {
	IMAGE_NAME=$1
	CUR_VERSION=$2

	if [ -z "$2" ]; then
		CUR_VERSION=$(get_current_version $IMAGE_NAME)
	fi

	if [ -z "$CUR_VERSION" ]; then
		errout "current version could not be determined fo $IMAGE_NAME"
		exit 1;
	fi

	info "current version is $CUR_VERSION"

	NEW_VERSION=$(increment_version $CUR_VERSION)
	NEW_IMAGE_NAME="$IMAGE_NAME:$NEW_VERSION"

	#name and build image in SOURCE_DIR and tag builded image
	#use no cache, we want all to be fresh when deploying
	docker build -t $NEW_IMAGE_NAME -f dockerfiles/Dockerfile-prod --no-cache . >&2 &&
	docker tag "$NEW_IMAGE_NAME" "$DOC_REPO/$NEW_IMAGE_NAME" >&2

	if [ $? -eq 0 ]; then
		sed -i "s|\(.*image:\s*$DOC_REPO/$IMAGE_NAME:\)$CUR_VERSION|\1$NEW_VERSION|g" "$DOCKER_COMPOSE_FILE"
		info "new version build: $(get_current_version $IMAGE_NAME)"
	else
		exit 1;
	fi
}

build() {
	docker-compose -f $DOCKER_COMPOSE_FILE -f $DOCKER_COMPOSE_LOCAL_FILE build
#    docker build --no-cache -t "$1" "$SOURCE_DIR"
}

dockerup() {
	case "$1" in
		"local") out "building for local";
			if [ ! -f "$DOCKER_COMPOSE_LOCAL_FILE" ]; then
				errout "no configuration file found in current dir ($DOCKER_COMPOSE_LOCAL_FILE)"
			fi
			docker-compose -f "$DOCKER_COMPOSE_FILE" -f "$DOCKER_COMPOSE_LOCAL_FILE" up
		;;
		"prod") out "building for prod";
			docker-compose up
			;;
		"whats") showhelp ;;
		*) out "wrong env"; exit 1; ;;
	esac
}

initproject() {
	DOC_PROJECT_NAME=$1
	initsettings "$DOC_PROJECT_NAME"

	if [ -z "$DOC_PROJECT_NAME" ]; then
		errout "no project name given"
		exit 1
	fi
	
	if [ -z "$DOC_USERNAME" ]; then
		errout "please set a username or company name in DOC_USERNAME"
		exit 1
	fi
	
	info "init project \"$DOC_FULL_NAME\""
	cp ./template/docker-compose* .
	cp ./template/Dockerfile* dockerfiles/

	for file in "$DOCKER_COMPOSE_FILE" "$DOCKER_COMPOSE_LOCAL_FILE" \
		"$DOCKER_COMPOSE_TEST_FILE" "$DOCKER_COMPOSE_BETA_FILE" \
		"$DOCKER_COMPOSE_PROD_FILE" "$DOC_DOCKERFILE_INSTALL" \
		"$DOC_DOCKERFILE_PROD"; do
		if [ -w "$file" ]; then
			sed -i "s|\[projectname\]|$DOC_PROJECT_NAME|g" "$file"
			sed -i "s|\[username\]|$DOC_USERNAME|g" "$file"
			sed -i "s|\[repohost\]|$DOC_REPO|g" "$file"
		else
			warnout "file "$file" is missing"
		fi
	done

	#initialize all deps before start building
	if [ -f "scripts/init.sh" ]; then
	    info "run init.sh"
	    scripts/init.sh
	fi

	info "start building project"
	build "$DOC_USERNAME/$DOC_PROJECT_NAME" &&
    info "===========\n$DOC_FULL_NAME was built successfully\n\n"
}

initsettings() {
	if [ ! -f "$DOC_SETTINGS" ]; then
		touch "$DOC_SETTINGS"
	fi
	source "$DOC_SETTINGS"

	DOC_PROJECT_NAME="$1"

	if [ -z "$DOC_REPO" ]; then
		while [ -z "$DOC_REPO" ]; do
			ask "docker regestry server (repo.domain.de:5000)? [DOC_REPO]"
			read DOC_REPO
		done
		echo "DOC_REPO=\"$DOC_REPO\"" >> "$DOC_SETTINGS"
	fi

	if [ -z "$DOC_USERNAME" ]; then
		while [ -z "$DOC_USERNAME" ]; do
			ask "user / company name? [DOC_USERNAME]"
			read DOC_USERNAME
		done
		echo "DOC_USERNAME=\"$DOC_USERNAME\"" >> "$DOC_SETTINGS"
	fi

	if [ -z "$DOC_PROJECT_NAME" ] || [ -z "$DOC_FULL_NAME" ]; then
		while [ -z "DOC_PROJECT_NAME" ]; do
			ask "project name? [DOC_PROJECT_NAME]"
			read DOC_PROJECT_NAME
		done
		echo "DOC_PROJECT_NAME=\"$DOC_PROJECT_NAME\"" >> "$DOC_SETTINGS"
		DOC_FULL_NAME="$DOC_USERNAME/$DOC_PROJECT_NAME"
		echo "DOC_FULL_NAME=\"$DOC_FULL_NAME\"" >> "$DOC_SETTINGS"
	fi

	source "$DOC_SETTINGS"
	export DOC_SETTINGS
}

dockerin() {
	WEB_CONTAINER=$(docker ps -f name=_web -q -l)
	info $(docker inspect --format 'Name: {{.Name}} erstellt: {{.Created}}' "$WEB_CONTAINER")
	docker exec -ti "$WEB_CONTAINER" bash
}


### Helper Methods

increment_version (){
  declare -a part=( ${1//\./ } )
  declare    new
  declare -i carry=1

  for (( CNTR=${#part[@]}-1; CNTR>=0; CNTR-=1 )); do
    len=${#part[CNTR]}
    new=$((part[CNTR]+carry))
    [ ${#new} -gt $len ] && carry=1 || carry=0
    [ $CNTR -gt 0 ] && part[CNTR]=${new: -len} || part[CNTR]=${new}
  done
  new="${part[*]}"
  echo -e "${new// /.}"
} 

RED='\033[0;31m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'
NC='\033[0m' # No Color
	
out() {
	echo -e "$@"
}

info() {
	out "${YELLOW}$@${NC}"
}

errout() {
	echo -e "${RED}[ERROR]: $@${NC}"
	exit 1;
}

warnout() {
	echo -e "${ORANGE}[WARNING]: $@${NC}"
}

ask() {
	echo -n -e "${YELLOW}$@${NC} "
}

if [ -f "$DOC_SETTINGS" ]; then
    source "$DOC_SETTINGS"
    export DOC_SETTINGS
fi

### Main
case "$1" in
	"build") out "building image"; build ;;
	"tag") out "build and tag"; buildandtag $2 $(get_current_version $2) ;;
	"up") out "docker up"; dockerup "$2" ;;
	"in") out "try to find a container and start a bash..."; dockerin ;;
	"deploy") out "starting deployment"; dockerdeploy "$2" "$3" ;;
	"initproject") initproject "$2" ;;
	*)   out "Unknown parameter"; showhelp; ;;
esac
